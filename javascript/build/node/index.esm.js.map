{"version":3,"file":"index.esm.js","sources":["../../node_modules/rollup-plugin-node-builtins/src/es6/path.js","../../packages/node/src/file/index.ts"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// @ts-ignore\nimport {string} from '@learnwy/common'\nimport {copyFile, mkdir, readdir, stat, writeFile} from \"fs\";\nimport {dirname, resolve} from \"path\";\n\nimport { promisify } from \"../utils/index.ts\";\n\nconst {formatString} = string;\n\nexport const asyncMkdir = promisify(mkdir);\nexport const asyncStat = promisify(stat);\nexport const asyncWriteFile = promisify(writeFile);\nexport const asyncReaddir = promisify(readdir);\nexport const asyncCopyFile = promisify(copyFile);\n\nasync function asyncMkdirp(dirPath: string): Promise<void> {\n  let rt;\n  try {\n    rt = await asyncMkdir(dirPath);\n  } catch (err) {\n    switch (err.code) {\n      case \"ENOENT\":\n        // dirPath's parent not exists\n        rt = await asyncMkdirp(dirname(dirPath)).then(() => asyncMkdirp(dirPath));\n        break;\n      default:\n        const st = await asyncStat(dirPath);\n        if (!st.isDirectory) {\n          throw new Error(formatString(\"create path %s:is a file\", dirPath));\n        }\n        break;\n    }\n  }\n  return rt;\n}\n\nexport {\n    resolve,\n    dirname,\n    mkdir,\n    stat,\n    writeFile,\n    readdir,\n    copyFile,\n    asyncMkdirp,\n};\n"],"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","resolve","resolvedPath","resolvedAbsolute","arguments","path","TypeError","charAt","filter","split","p","join","dirname","result","root","dir","substr","xs","f","res","push"],"mappings":"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"}